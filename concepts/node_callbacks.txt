In Synchronous program (line-by-line code execution):

function processData() {
	const data = fetchData();
	data += 1;
	return data;
}

If fetch data takes a long time to load the data (i.e streaming it off the internet), then this causesthe whole program to 'block' - sitting still and wait or the thread of execution pauses at that line
until all the data is fetched.

Node.js is an asynchronous platform.

This means that Node.js does not wait around for things like file I/O to finish. Node.js uses callbacks. 

*** A callback is a function called at the completion of a given task ***

This prevents any blocking and allows other code to be run in the meantime.

Node.js Asynchronous program:

function asyncOperation(a, b, c, callback) {
	// ... lots of work ...
		 if (/ * an error occurs */) {
				return callback(new Error("An error has occurred"));
		 }
	// ... MORE WORK ...
		 callback(null, d, e, f);
}


asyncOperation(params, function(err, returnValues..) {
	if (err) {
		return err
	}

	return returnValues..;
}

Callbacks give you an interface with which to say "when you're done doing that, do all this".

	
